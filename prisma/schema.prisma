generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  email        String @unique
  username     String @unique
  passwordHash String

  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  birthday  DateTime?

  firstName         String?
  lastName          String?
  profilePictureUrl String?
  bio               String?
  location          String?
  homeAirport       String?

  permissions UserPermission[] // Removed default ([USER])

  organizationId       String?
  organizationRole     UserOrganizationRole @default(GUEST)
  organizationJoinedAt DateTime?

  language      String  @default("EN")
  publicProfile Boolean @default(true)
  disabled      Boolean @default(false)

  logbookEntries LogbookEntry[] @relation("EntryAuthor")
  crewForEntries LogbookEntry[] @relation("EntryCrew")
  organization   Organization?  @relation(fields: [organizationId], references: [id])
}

model LogbookEntry {
  id        Int      @id @default(autoincrement())
  unique    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  date     DateTime?
  depAd    String?
  arrAd    String?
  offBlock DateTime?
  onBlock  DateTime?

  aircraftType         String?
  aircraftRegistration String?
  picName              String?

  total             Float   @default(0)
  dayTime           Float   @default(0)
  nightTime         Float   @default(0)
  sepVfr            Float   @default(0)
  sepIfr            Float   @default(0)
  meVfr             Float   @default(0)
  meIfr             Float   @default(0)
  picTime           Float   @default(0)
  copilotTime       Float   @default(0)
  multiPilotTime    Float   @default(0)
  instructorTime    Float   @default(0)
  dualTime          Float   @default(0)
  simTime           Float   @default(0)
  simInstructorTime Float   @default(0)
  landDay           Int     @default(0)
  landNight         Int     @default(0)
  includeInFt       Boolean @default(true)
  remarks           String?

  userId Int
  user   User   @relation("EntryAuthor", fields: [userId], references: [id])
  crew   User[] @relation("EntryCrew")

  plan      FlightPlan?
  recording FlightRecording?
}

model FlightPlan {
  id          Int       @id @default(autoincrement())
  depAd       String
  arrAd       String
  route       String?
  alternate   String?
  cruiseLevel String?
  cruiseSpeed String?
  fuelPlan    Float?
  etd         DateTime?
  eta         DateTime?
  remarks     String?
  weather     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  logbookEntryId Int?          @unique
  logbookEntry   LogbookEntry? @relation(fields: [logbookEntryId], references: [id])
}

model FlightRecording {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileName String
  data     Json

  logbookEntryId Int          @unique
  logbookEntry   LogbookEntry @relation(fields: [logbookEntryId], references: [id])
}

model Organization {
  id           String           @id
  name         String           @unique
  handle       String           @unique
  type         OrganizationType @default(SCHOOL)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  description  String?
  logoUrl      String?
  websiteUrl   String?
  contactEmail String?
  address      String?
  phoneNumber  String?
  public       Boolean          @default(true)
  archived     Boolean          @default(false)

  members User[]
}

enum OrganizationType {
  SCHOOL
  COMPANY
  COMMUNITY
  CLUB
  OTHER
}

enum UserOrganizationRole {
  GUEST
  STUDENT
  PILOT
  OPS
  FI
  TKI
  MAIN
  OFFICE
  SUPERVISOR
  ADMIN
  OTHER
}

enum UserPermission {
  USER
  SUPPORT
  QUESTIONS_MANAGER
  FPL_MANAGER
  LOGBOOK_MANAGER
  MANAGER
  ADMIN
}
